{"version":3,"sources":["node_modules/shortid/lib/random/random-from-seed.js","node_modules/shortid/lib/alphabet.js","node_modules/shortid/lib/random/random-byte-browser.js","node_modules/nanoid/format.js","node_modules/shortid/lib/generate.js","node_modules/shortid/lib/build.js","node_modules/shortid/lib/is-valid.js","node_modules/shortid/lib/util/cluster-worker-id-browser.js","node_modules/shortid/lib/index.js","node_modules/shortid/index.js","index.js"],"names":["activeTabElement","activeModalId","shortid","require","addTaskItemInput","document","querySelector","listContainer","filterContainer","overlay","tabActiveContent","itemCount","createDomElement","tag","createElement","setElementAttibutes","element","attributes","Object","keys","forEach","key","setAttribute","appendMultipleChild","args","parent","shift","appendChild","onCheckBoxClick","e","taskCheckBox","currentTarget","taskList","parentNode","taskPara","nextElementSibling","taskTickButton","dataset","checked","editLocalStorageItem","id","filter","classList","toggle","text","artificialClick","buttonContent","target","textContent","contains","childrenArray","Array","from","children","remove","add","item","createTickButton","elem","tickButton","innerHTML","property","value","tasksObj","JSON","parse","localStorage","getItem","setItem","stringify","addLocalStorageItem","taskObj","push","deleteLocalStorageItem","newTaskObj","saveHelper","editInput","prevText","taskItem","flag","taskDelete","taskNoteButton","innerText","removeChild","SaveAfterEdit","closest","trim","afterEdit","editItem","tagName","class","type","focus","val","addEventListener","editNote","modal","editButton","saveButton","textAreaElement","modalPara","saveNote","openNoteModal","noteButton","textarea","addNoteModalContent","noteModal","noteContent","textAreaClass","saveClass","paraClass","editClass","modalTextArea","modalTextPara","createNoteModal","generate","createNoteButton","createTaskCheckBox","createTaskPara","taskParaClass","createTaskDeleteButton","deleteButton","createTaskElement","note","addTaskItem","removeModal","getElementById","addItemsFromLocalStorage","task"],"mappings":"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","file":"todo.100658da.js","sourceRoot":"..","sourcesContent":["'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","/**\n * Secure random string generator with custom alphabet.\n *\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\n * will not be secure.\n *\n * @param {generator} random The random bytes generator.\n * @param {string} alphabet Symbols to be used in new random string.\n * @param {size} size The number of symbols in new random string.\n *\n * @return {string} Random string.\n *\n * @example\n * const format = require('nanoid/format')\n *\n * function random (size) {\n *   const result = []\n *   for (let i = 0; i < size; i++) {\n *     result.push(randomByte())\n *   }\n *   return result\n * }\n *\n * format(random, \"abcdef\", 5) //=> \"fbaef\"\n *\n * @name format\n * @function\n */\nmodule.exports = function (random, alphabet, size) {\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  var step = Math.ceil(1.6 * mask * size / alphabet.length)\n\n  var id = ''\n  while (true) {\n    var bytes = random(step)\n    for (var i = 0; i < step; i++) {\n      var byte = bytes[i] & mask\n      if (alphabet[byte]) {\n        id += alphabet[byte]\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\n/**\n * @callback generator\n * @param {number} bytes The number of bytes to generate.\n * @return {number[]} Random bytes.\n */\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1459707606518;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 6;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nmodule.exports = require('./lib/index');\n","const shortid = require('shortid')\nconst addTaskItemInput = document.querySelector('.additem-input')\nconst listContainer = document.querySelector('.list-container')\nconst filterContainer = document.querySelector('.filter')\nconst overlay = document.querySelector('.overlay')\nlet tabActiveContent = ''\nlet itemCount = 0\nlet activeTabElement\nlet activeModalId\n\nconst createDomElement = tag => document.createElement(tag)\n\nconst setElementAttibutes = (element, attributes) => {\n  Object.keys(attributes).forEach(key => {\n    element.setAttribute(key, attributes[key])\n  })\n  return element\n}\n\nconst appendMultipleChild = (...args) => {\n  const parent = args.shift()\n  args.forEach(element => {\n    parent.appendChild(element)\n  })\n}\n\nconst onCheckBoxClick = e => {\n  let taskCheckBox = e.currentTarget\n  let taskList = taskCheckBox.parentNode\n  let taskPara = taskCheckBox.nextElementSibling\n  let taskTickButton = taskCheckBox.querySelector('.list__tick')\n  if (taskCheckBox.dataset.checked === 'true') {\n    taskCheckBox.dataset.checked = 'false' // active task\n    editLocalStorageItem(taskList.id, 'checked', 'false')\n    if (tabActiveContent === 'Completed') filter(null, 'Completed', true)\n  } else {\n    taskCheckBox.dataset.checked = 'true'\n    editLocalStorageItem(taskList.id, 'checked', 'true')\n    if (tabActiveContent === 'Active') filter(null, 'Active', true)\n  }\n  taskPara.classList.toggle('taskdone')\n  taskTickButton.classList.toggle('hide')\n}\n\nconst filter = (e, text, artificialClick = false) => {\n  let buttonContent = text || e.target.textContent\n  // for preventing  handler executing clicks on filterContainer\n  if (!text && !e.target.classList.contains('filter__item')) return\n  tabActiveContent = buttonContent\n  let childrenArray = Array.from(listContainer.children)\n  if (!artificialClick) {\n    if (activeTabElement) activeTabElement.classList.remove('tabstyle')\n    e.target.classList.add('tabstyle')\n    activeTabElement = e.target\n  }\n  switch (buttonContent) {\n    case 'All':\n      for (let item of childrenArray) {\n        if (item.classList.contains('hide')) {\n          item.classList.remove('hide')\n        }\n      }\n      break\n    case 'Active':\n      for (let item of childrenArray) {\n        let checkBox = item.querySelector('.list__checkbox')\n        if (checkBox.dataset.checked === 'true') {\n          item.classList.add('hide')\n        } else {\n          item.classList.remove('hide')\n        }\n      }\n      break\n    case 'Completed':\n      for (let item of childrenArray) {\n        let checkBox = item.querySelector('.list__checkbox')\n        if (checkBox.dataset.checked === 'false') {\n          item.classList.add('hide')\n        } else {\n          item.classList.remove('hide')\n        }\n      }\n      break\n  }\n}\n\nconst createTickButton = (elem, checked) => {\n  let tickButton = createDomElement('div')\n  tickButton.innerHTML = '&#10003'\n  if (checked === 'true') {\n    tickButton.setAttribute('class', 'list__tick')\n  } else {\n    tickButton.setAttribute('class', 'list__tick hide')\n  }\n  elem.appendChild(tickButton)\n}\n\nconst editLocalStorageItem = (id, property, value) => {\n  let tasksObj = JSON.parse(localStorage.getItem('tasks'))\n  for (let item of tasksObj) {\n    if (item.id === id) {\n      item[property] = value\n    }\n  }\n  localStorage.setItem('tasks', JSON.stringify(tasksObj))\n}\n\nconst addLocalStorageItem = item => {\n  if (!localStorage.getItem('tasks')) {\n    localStorage.setItem('tasks', JSON.stringify([item]))\n    return\n  }\n  let taskObj = JSON.parse(localStorage.getItem('tasks'))\n  taskObj.push(item)\n  localStorage.setItem('tasks', JSON.stringify(taskObj))\n}\n\nconst deleteLocalStorageItem = id => {\n  let taskObj = JSON.parse(localStorage.getItem('tasks'))\n  let newTaskObj = taskObj.filter(item => item.id !== id)\n  localStorage.setItem('tasks', JSON.stringify(newTaskObj))\n}\n\nconst saveHelper = (editInput, prevText, taskItem, flag) => {\n  const taskCheckBox = taskItem.querySelector('.list__checkbox')\n  const taskDelete = taskItem.querySelector('.list__deleteButton')\n  const taskPara = taskItem.querySelector('.list__task')\n  const taskNoteButton = taskItem.querySelector('.note')\n  taskPara.innerText = editInput.value\n  if (flag === 1) taskPara.innerText = prevText\n  editLocalStorageItem(taskItem.id, 'text', taskPara.innerText)\n  taskPara.classList.toggle('hide')\n  taskDelete.classList.toggle('hide')\n  taskCheckBox.classList.toggle('hide')\n  taskNoteButton.classList.toggle('hide')\n  taskItem.removeChild(editInput)\n}\n\nconst SaveAfterEdit = (e, prevText, editInput) => {\n  let element = e.target.closest('.list__edit')\n  let flag = 0\n  if (element) return\n  if (editInput.value.trim() === '') flag = 1\n  const taskItem = editInput.parentNode\n  if (!taskItem) return\n  saveHelper(editInput, prevText, taskItem, flag)\n}\n\nconst afterEdit = (e, prevText) => {\n  let flag = 0\n  if (e.key !== 'Enter') return\n  const editInput = e.target\n  if (editInput.value.trim() === '') flag = 1\n  const taskItem = editInput.parentNode\n  saveHelper(editInput, prevText, taskItem, flag)\n}\n\nconst editItem = e => {\n  if (e.target.tagName !== 'P') return\n  const taskList = e.target.parentNode\n  const taskPara = e.target\n  const taskCheckBox = taskList.querySelector('.list__checkbox')\n  const taskDelete = taskList.querySelector('.list__deleteButton')\n  const taskNoteButton = taskList.querySelector('.note')\n  taskPara.classList.toggle('hide')\n  taskDelete.classList.toggle('hide')\n  taskCheckBox.classList.toggle('hide')\n  taskNoteButton.classList.toggle('hide')\n  const editInput = createDomElement('input')\n  setElementAttibutes(editInput, {\n    class: 'list__edit',\n    value: taskPara.innerText,\n    type: 'text'\n  })\n\n  taskList.appendChild(editInput)\n  editInput.focus()\n  let val = editInput.value // store the value of the element\n  editInput.value = '' // clear the value of the element\n  editInput.value = val\n  editInput.addEventListener('keydown', e => afterEdit(e, val))\n  document.addEventListener('click', e => SaveAfterEdit(e, val, editInput))\n}\n\nconst editNote = (e) => {\n  const modal = e.target.parentNode\n  const editButton = e.target\n  const saveButton = modal.querySelector('.modal__saveButton')\n  const textAreaElement = modal.querySelector('.modal__textarea')\n  const modalPara = modal.querySelector('.modal__text')\n  textAreaElement.classList.remove('hide')\n  textAreaElement.focus()\n  textAreaElement.value = ''\n  textAreaElement.value = modalPara.textContent\n  saveButton.classList.remove('hide')\n  modalPara.classList.add('hide')\n  editButton.classList.add('hide')\n}\n\nconst saveNote = (e) => {\n  const modal = e.target.parentNode\n  const taskItem = modal.parentNode.parentNode\n  const saveButton = e.target\n  const editButton = modal.querySelector('.modal__editButton')\n  const textAreaElement = modal.querySelector('.modal__textarea')\n  const modalPara = modal.querySelector('.modal__text')\n  if (textAreaElement.value.trim() === '') return\n  modalPara.textContent = textAreaElement.value\n  editLocalStorageItem(taskItem.id, 'note', modalPara.textContent)\n  textAreaElement.classList.add('hide')\n  saveButton.classList.add('hide')\n  modalPara.classList.remove('hide')\n  editButton.classList.remove('hide')\n}\n\nconst openNoteModal = (e) => {\n  const noteButton = e.target\n  // to prevent event handler from executing clicks from its children\n  if (!e.target.classList.contains('note')) return\n  const modal = noteButton.querySelector('.modal')\n  activeModalId = modal.id\n  modal.classList.remove('hide')\n  const textarea = modal.querySelector('.modal__textarea')\n  if (!textarea.classList.contains('hide')) textarea.focus()\n  overlay.classList.remove('hide')\n}\n\nconst addNoteModalContent = (noteModal, noteContent) => {\n  let [textAreaClass, saveClass, paraClass, editClass] = ['', '', '', '']\n  if (noteContent === '') {\n    paraClass = 'hide'\n    editClass = 'hide'\n  } else {\n    textAreaClass = 'hide'\n    saveClass = 'hide'\n  }\n  const modalTextArea = createDomElement('textarea')\n  modalTextArea.setAttribute('class', `modal__textarea ${textAreaClass}`)\n  const saveButton = createDomElement('button')\n  saveButton.setAttribute('class', `modal__button modal__saveButton ${saveClass}`)\n  saveButton.textContent = 'SAVE'\n  saveButton.addEventListener('click', saveNote)\n  const editButton = createDomElement('button')\n  editButton.setAttribute('class', `modal__button modal__editButton ${editClass}`)\n  editButton.textContent = 'EDIT'\n  editButton.addEventListener('click', editNote)\n  const modalTextPara = createDomElement('p')\n  if (noteContent !== '') modalTextPara.textContent = noteContent\n  modalTextPara.setAttribute('class', `modal__text ${paraClass}`)\n  appendMultipleChild(noteModal, modalTextArea, modalTextPara, saveButton, editButton)\n}\n\nconst createNoteModal = (noteContent) => {\n  const noteModal = createDomElement('div')\n  noteModal.setAttribute('class', 'modal hide')\n  noteModal.setAttribute('id', shortid.generate())\n  addNoteModalContent(noteModal, noteContent)\n  return noteModal\n}\n\nconst createNoteButton = (noteContent) => {\n  const noteButton = createDomElement('div')\n  noteButton.setAttribute('class', 'note')\n  noteButton.innerText = '+'\n  noteButton.addEventListener('click', openNoteModal)\n  const noteModal = createNoteModal(noteContent)\n  noteButton.appendChild(noteModal)\n  return noteButton\n}\n\nconst createTaskCheckBox = (taskObj) => {\n  const taskCheckBox = createDomElement('div')\n  taskCheckBox.dataset.checked = taskObj.checked\n  setElementAttibutes(taskCheckBox, {\n    class: 'list__checkbox'\n  })\n  createTickButton(taskCheckBox, taskObj.checked)\n  taskCheckBox.addEventListener('click', onCheckBoxClick)\n  return taskCheckBox\n}\n\nconst createTaskPara = (taskObj) => {\n  const taskPara = createDomElement('p')\n  taskPara.innerText = taskObj.text\n  let taskParaClass = 'list__task'\n  if (taskObj.checked === 'true') taskParaClass += ' taskdone'\n  setElementAttibutes(taskPara, {\n    class: taskParaClass\n  })\n  return taskPara\n}\n\nconst createTaskDeleteButton = (taskItem) => {\n  const deleteButton = createDomElement('div')\n  deleteButton.innerHTML = '&#9747'\n  setElementAttibutes(deleteButton, {\n    class: 'list__deleteButton'\n  })\n  deleteButton.addEventListener('click', () => {\n    deleteLocalStorageItem(taskItem.id)\n    listContainer.removeChild(taskItem)\n\n    itemCount--\n    if (itemCount === 0) {\n      filterContainer.classList.add('hide')\n    }\n  })\n  return deleteButton\n}\n\nconst createTaskElement = taskObj => {\n  const taskItem = createDomElement('li')\n  setElementAttibutes(taskItem, {\n    class: 'list',\n    id: taskObj.id\n  })\n  const taskCheckBox = createTaskCheckBox(taskObj)\n  const taskPara = createTaskPara(taskObj)\n  const deleteButton = createTaskDeleteButton(taskItem)\n  const noteButton = createNoteButton(taskObj.note)\n  taskItem.addEventListener('dblclick', editItem)\n  appendMultipleChild(taskItem, taskCheckBox, taskPara, noteButton, deleteButton)\n  return taskItem\n}\n\nconst addTaskItem = e => {\n  if (e.key !== 'Enter') return\n  let text = addTaskItemInput.value\n  if (text.trim() === '') return\n  addTaskItemInput.value = ''\n  const taskObj = { text, checked: 'false', id: shortid.generate(), note: '' }\n  addLocalStorageItem(taskObj)\n  const taskItem = createTaskElement(taskObj)\n  itemCount++\n  listContainer.appendChild(taskItem)\n  if (filterContainer.classList.contains('hide')) {\n    filterContainer.classList.remove('hide')\n  }\n  // item is added when completed tab is active\n  if (tabActiveContent === 'Completed') filter(null, 'Completed', true)\n}\n\nconst removeModal = (e) => {\n  const modal = document.getElementById(activeModalId)\n  const overlay = e.target\n  modal.classList.add('hide')\n  overlay.classList.add('hide')\n}\n\nconst addItemsFromLocalStorage = () => {\n  if (!localStorage.getItem('tasks')) return\n  let taskItems = JSON.parse(localStorage.getItem('tasks'))\n  taskItems.forEach(task => createTaskElement(task))\n}\n\naddItemsFromLocalStorage()\n\noverlay.addEventListener('click', removeModal)\nfilterContainer.addEventListener('click', filter)\naddTaskItemInput.addEventListener('keydown', addTaskItem)\n"]}